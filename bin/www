#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Turkish_Chess:server');
var http = require('http');
var core = require('../core');
var fs = require('fs');
var path = require('path');
/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */
var server = http.createServer(app);
var io = require('socket.io').listen(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var game = [];
var clients = [];
game.push([new core.Board(), 0, 0]);

// Return an available game
function getAvailableGame(){

    var available = [];

    for(var i = 0; i < game.length; i++){
        if(game[i][1] == -1 || game[i][2] == -1){
            available = game[i];
        }
    }

    if(available.length == 0){
        game.push([new core.Board(), -1, -1]);
        available = game[game.length-1];
    }

    return available;
}

function getGameClientID(id){
    var found = false;
    var i = 0;

    while(!found && i < game.length){
        if(game[i][1] == clients.indexOf(id) || game[i][2] == clients.indexOf(id)){
            g = game[i];
        }
        i++;
    }

    return g;
}

// Connexion
io.sockets.on('connection', function (socket) {
    clients.push(socket);

    // Initialisation du plateau + broadcast
    socket.on('play', function(){
        var g = getAvailableGame();
        if(g[1] == -1){
            g[1] = clients.indexOf(socket);
        }
        else if(g[2] == -1){
            g[2] = clients.indexOf(socket);
        }
        console.log(g);

        socket.emit("board", g[0].getBoardArray());

        socket.emit("turn", false);

        if(g[1] != -1 && g[2] != -1) {
            /*
            clients[g[1]].emit("test", "T'es blanc, tu commences");
            clients[g[2]].emit("test", "T'es noir, attends que le blanc joue");
            */
            clients[g[1]].emit("turn", true);
            clients[g[2]].emit("turn", false);
        }
    });

    // Déplacement d'un pion en broadcast
    socket.on('move', function(){
        console.log('Fin de tour');
        console.log('Joueur suivant');
        clients[g[1]].emit("turn", true);
        clients[g[2]].emit("turn", false);
    });

    // Victoire


    // Deconnexion d'un client
    socket.on('disconnect', function(){
        console.log('Client déconnecté');
    });
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */


function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
