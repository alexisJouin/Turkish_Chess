#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Turkish_Chess:server');
var http = require('http');
var core = require('../core');
var fs = require('fs');
var path = require('path');
/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */
var server = http.createServer(app);
var io = require('socket.io').listen(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var game = [];

// Return an available game (1 player), or create a new one
function getAvailableGame(){

    var available = null;

    for(var i = 0; i < game.length; i++){
        if(game[i][0].getPlayers().length <= 1){
            available = game[i];
        }
    }

    if(available == null){
        game.push([new core.Board(), null, null]);
        available = game[game.length-1];
    }

    return available;
}

// Return the current game of client 'id'
function getGameClientID(id){
    var found = false;
    var i = 0;
    var board = null;

    while(!found && i < game.length){
        if(game[i][0].getPlayers()[0] == id || game[i][0].getPlayers()[1] == id){
            board = game[i];
        }
        i++;
    }

    return board;
}

// Connection
io.sockets.on('connection', function (socket) {

    // Sending the board to the new player
    socket.on('play', function(name){

        var testAlreadyInGame = getGameClientID(socket);
        if(testAlreadyInGame == null){
            var board = getAvailableGame();
            if(board[1] == null){
                board[1] = name;
            }
            else if(board[2] == null){
                board[2] = name;
            }
            
            board[0].addPlayer(socket);

            socket.emit("board", board[0].getBoardArray());
            socket.emit("waiting", true);

            if(board[0].getPlayers().length == 2) {
                board[0].getPlayers()[0].emit('opponentName', board[2]);
                board[0].getPlayers()[1].emit('opponentName', board[1]);

                board[0].getPlayers()[0].emit("waiting", false);
                board[0].getPlayers()[1].emit("waiting", false);

                board[0].getPlayers()[0].emit("colour", 0);
                board[0].getPlayers()[1].emit("colour", 1);

                board[0].getPlayers()[board[0].getCurrentPlayer()].emit("turn", true);
            }
        }
    });

    // Pawn selected, send possibles moves
    socket.on('pawn', function(pos){
        var board = getGameClientID(socket);

        var moves = [];

        if(board[0].getPossibleAttacks(pos[0], pos[1]).length > 0){
            moves = board[0].getPossibleAttacks(pos[0], pos[1]);
        }
        else {
            moves = board[0].getPossibleMovesObjects(pos[0], pos[1]);
        }

        socket.emit('possibleMoves', moves);
    });

    // Client moves the pawn at 'pos'
    socket.on('move', function(init, final){
        var board = getGameClientID(socket);

        board[0].moveOrAttackPawn(init[0],init[1], final[0], final[1]);

        board[0].swapPlayer();

        board[0].getPlayers()[1].emit("board", board[0].getBoardArray());
        board[0].getPlayers()[0].emit("board", board[0].getBoardArray());

        board[0].getPlayers()[board[0].getCurrentPlayer()].emit("turn", true);
        board[0].getPlayers()[(board[0].getCurrentPlayer()+1)%2].emit("turn", false);
    });


    // Disconnection
    socket.on('disconnect', function(){
        var board = getGameClientID(socket);
        if(board != null) {
            if (board[0].getPlayers()[0] !== socket && board[0].getPlayers()[0] != undefined) {
                board[0].getPlayers()[0].emit('opponentDisconnected');
            }
            else if(board[0].getPlayers()[1] != undefined){
                board[0].getPlayers()[1].emit('opponentDisconnected');
            }
            game.splice(game.indexOf(board), 1);
        }
    });
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */


function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
